apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: {{ template "noths-service-std.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "noths-service-std.labels" . | nindent 4 }}
    app: {{ template "noths-service-std.name" . }}
    chart: {{ template "noths-service-std.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  podSelector:
    matchLabels:
      app: {{ template "noths-service-std.name" . }}
      release: {{ .Release.Name }}
  listeners:
  - portMapping:
      port: {{ .Values.deployment.containerPort }}
      protocol: http  
    {{- if .Values.appMesh.node.enableHealthCheck }}
    {{ toYaml .Values.appMesh.node.healthCheck }}
    {{- end }}
    tls:
      # mode: STRICT | PERMISSIVE | DISABLE # used by virtual nodes to 
      mode: {{ .Values.appMesh.node.tls.mode }}
      certificate:
        sds:
          secretName: {{ .Values.appMesh.node.tls.trustDomain }}/{{ template "noths-service-std.name" . }}
      validation:
        trust:
          sds:
            secretName: {{ .Values.appMesh.node.tls.trustDomain }}
      {{ if .Values.appMesh.node.tls.allowServiceList }}
        subjectAlternativeNames:
          match:
            exact: {{ .Values.appMesh.node.tls.allowServiceList }}
      {{- end }}

  backends:
    - virtualService:
        virtualServiceRef:
          name: {{ template "noths-service-std.name" . }}
  {{- if .Values.appMesh.node.enableSdsTls }}
  backendDefaults:
    clientPolicy:
  {{- end }}
  serviceDiscovery:
    {{- if contains "CloudMap" .Values.appMesh.node.serviceDiscoveryType }}
    awsCloudMap:
      namespaceName: {{ .Values.deployment.dnsDomain | quote }}
      serviceName: {{ template "noths-service-std.name" . }}
    {{- else }}
    dns:
      hostname: {{ template "noths-service-std.name" . }}.{{ .Values.deployment.dnsDomain }}
    {{- end }}
